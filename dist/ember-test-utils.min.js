TestUtils=Ember.Namespace.create(),TestUtils.checkElements=function(a,b,c,d){equal(a.get("length"),c.length,c.length+" elements are there");for(var e=0;e<c.length;e++)if(d){var f=a.objectAt(e);TestUtils.equal(f.get(b),c[e],"element at index "+e+" has "+b+" = "+c[e])}else{var g=a.findBy(b,c[e]);TestUtils.ok(g,"element with "+b+" = "+c[e]+" is present in arrangedContent")}},TestUtils.getCurDate=function(a){var b=new Date;return a&&(b=new Date(b.getTime()+1e3*a)),b.toLocaleDateString()+" "+b.toTimeString()},TestUtils.hasAttrs=function(a,b){for(var c in b)if(b.hasOwnProperty(c)&&a.get(c)!==b[c])return!1;return!0},TestUtils.setupAppForTesting=function(a,b){Ember.run(function(){a.setupEventDispatcher(),a.resolve(a),b.register("view:select",Ember.Select),b.register("view:checkbox",Ember.Checkbox)})},TestUtils.getter=function(a,b){var c,d,e=b.split(/\.(?:\d+|@|\[.*?\])\./),f=b.match(/\b(\d+|@|\.\[.*?\]\.?)(?:\b|$)/g),g=a;for(e.length>0&&(e[e.length-1]=e[e.length-1].replace(/\.(?:\d+|@|\[.*?\])$/,"")),e.length>1&&(e[0]=e[0].replace(/\.(?:\d+|@|\[.*?\])$/,"")),d=0;d<e.length;d++){if(!g)return g;if(c=g,g=g.get(e[d]),f&&f[d]){var h,i=Number(f[d]);if(0===i||i){if(!g.objectAt)return null;g=g.objectAt(f[d])}else{if(!(h=f[d].match(/^\.\[(.*?)(?:=(.*?))?\]\.?$/)))return null;if(!g.findBy)return null;g=g.findBy(h[1],h[2])}}}return[g,c,e[d-1]]},TestUtils.setter=function(a,b,c,d,e){var f=TestUtils.getter(a,b);if(f&&f[0])if("array"===Ember.typeOf(f[0])||"number"===Ember.typeOf(f[0].get("length")))switch(e[0]){case"push":f[0].pushObject(d);break;case"pop":f[0].popObject();break;case"unshift":f[0].unshiftObject(d);break;case"shift":f[0].shiftObject();break;case"remove":f[0].removeObject(d);break;case"insertAt":f[0].insertAt(e[1],d);break;case"removeAt":f[0].removeAt(e[1])}else f[0].set(c,d)},$("body").append("<div id='qunit-main-container'><h1 id='qunit-header'>Tests</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar'></div><h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol><div id='qunit-fixture'></div></div><div id='ember-testing'></div>");var attr=DS.attr,hasMany=DS.hasMany,belongsTo=DS.belongsTo;QUnit.config.reorder=!1,QUnit.config.autostart=!1;var testCount=0,qunitTest=QUnit.test;QUnit.test=window.test=function(){testCount+=1,qunitTest.apply(this,arguments)},QUnit.begin(function(a){a.totalTests=testCount,TestUtils.equal=equal,TestUtils.ok=ok,TestUtils.wait=wait,TestUtils.andThen=andThen}),emq.globalize(),TestCase=Ember.Namespace.create(),TestCase.TestSuit=Ember.Object.extend({init:function(){this._super(),this.modularize();var a=this.get("testCases");if(a)for(var b=0;b<a.length;b++)a[b].register()},suitName:"",moduleOpts:{},testCases:Utils.hasManyWithHierarchy("TestCase.TestHierarchyMap",0,"type"),modularize:function(){module(this.get("suitName"),this.get("moduleOpts"))}}),TestCase.EmberTestSuit=TestCase.TestSuit.extend({moduleFunction:"moduleFor",param:"",modularize:function(){window[this.get("moduleFunction")](this.get("param"),this.get("suitName"),this.get("moduleOpts"))}}),TestCase.TestCase=Ember.Object.extend({register:function(){var a=this;test(this.get("title"),function(){a.set("testData.testContext",this),a.run()})},title:"",testData:Utils.belongsTo(),testBlocks:Utils.hasManyWithHierarchy("TestCase.TestHierarchyMap",1,"type"),initialize:function(){},run:function(){this.initialize();for(var a=this.get("testBlocks"),b=0;b<a.length;b++)a[b].run(this.get("testData"))}}),TestCase.TestCaseMap={baseTestCase:TestCase.TestCase},TestCase.TestBlock=Ember.Object.extend({testOperations:Utils.hasManyWithHierarchy("TestCase.TestHierarchyMap",2,"type"),run:function(a){var b=this;TestUtils.wait(),TestUtils.andThen(function(){Ember.run(function(){for(var c=b.get("testOperations"),d=0;d<c.length;d++)c[d].run(a)})})}}),TestCase.TestBlocksMap={baseTestBlock:TestCase.TestBlock},TestCase.TestOperation=Ember.Object.extend({run:function(){}}),TestCase.TestValuesCheck=Ember.Object.extend({values:Utils.hasManyWithHierarchy("TestCase.TestValueCheckHierarchy",0,"type"),run:function(a){for(var b=this.get("values"),c=0;c<b.length;c++){var d=b[c].get("path"),e=b[c].get("valuePath")?TestUtils.getter(a,b[c].get("valuePath"))[0]:b[c].get("value"),f=TestUtils.getter(a,d);"object"===Ember.typeOf(e)?TestUtils.ok(TestUtils.hasAttrs(f[0],e),b[c].get("message")):"array"===Ember.typeOf(e)?TestUtils.checkElements(f[1],f[2],e):TestUtils.equal(f[0],e,b[c].get("message"))}},attr1:function(a,b){return arguments.length>1?(this.set("values",b),b):void 0}.property()}),TestCase.TestValueCheckObject=Ember.Object.extend({path:"",value:"",valuePath:null,message:""}),TestCase.TestValueCheckHierarchy=[{classes:{base:TestCase.TestValueCheckObject},base:"base",keysInArray:["type","path","value","message","valuePath"]}],Utils.registerHierarchy(TestCase.TestValueCheckHierarchy),TestCase.TestAssignValues=Ember.Object.extend({values:Utils.hasManyWithHierarchy("TestCase.TestValueAssignHierarchy",0,"type"),run:function(a){for(var b=this.get("values"),c=0;c<b.length;c++){var d=b[c].get("path"),e=b[c].get("putPath"),f=b[c].get("valuePath")?TestUtils.getter(a,b[c].get("valuePath"))[0]:b[c].get("value");TestUtils.setter(a,d,e,f,b[c].get("param"))}},attr1:function(a,b){return arguments.length>1?(this.set("values",b),b):void 0}.property()}),TestCase.TestValueAssignObject=Ember.Object.extend({path:"",putPath:"",value:"",valuePath:null,param:[]}),TestCase.TestValueAssignHierarchy=[{classes:{base:TestCase.TestValueAssignObject},base:"base",keysInArray:["type","path","putPath","value","param","valuePath"]}],Utils.registerHierarchy(TestCase.TestValueAssignHierarchy),TestCase.SetupStore=Ember.Object.extend({run:function(a){var b=a.get("testContext"),c=b.get("container");b.store?c.register("store:main",b.store()):DS._setupContainer?DS._setupContainer(c):c.register("store:main",DS.Store),c.register("adapter:application",CrudAdapter.ApplicationAdapter),c.register("serializer:application",CrudAdapter.ApplicationSerializer),a.set("store",c.lookup("store:main"))}}),TestCase.TestHierarchyMap=[{classes:{baseTestCase:TestCase.TestCase},base:"baseTestCase",keysInArray:["type","title","testBlocks","testData"],childrenKey:"testBlocks"},{classes:{baseTestBlock:TestCase.TestBlock},base:"baseTestBlock",keysInArray:["type","testOperations","attr1","attr2","attr3"],childrenKey:"testOperations"},{classes:{baseOperation:TestCase.TestOperation,checkValues:TestCase.TestValuesCheck,assignValues:TestCase.TestAssignValues,setupStore:TestCase.SetupStore},base:"baseOperation",keysInArray:["type","attr1","attr2","attr3"]}],Utils.registerHierarchy(TestCase.TestHierarchyMap),MockjaxUtils=Ember.Namespace.create(),MockjaxUtils.MockjaxSettings=Ember.Object.extend({throwServerError:!1,serverErrorCode:500,throwProcessError:0,modelChangeMap:{},lastPassedData:Ember.Object.create(),responseTime:function(a,b){arguments.length>1&&($.mockjaxSettings.responseTime=b||50)}.property(),logging:function(a,b){arguments.length>1&&($.mockjaxSettings.logging=Ember.isEmpty(b)?!1:b)}.property()}),MockjaxUtils.MockjaxSettingsInstance=MockjaxUtils.MockjaxSettings.create(),MockjaxUtils.MockjaxData=Ember.Object.extend({name:"",data:Utils.hasMany(),modelClass:null,getAdditionalData:{},getAllAdditionalData:{},createUpdateAdditionalData:{}}),MockjaxData.addMockjaxData=function(a){MockjaxUtils.MockjaxDataMap[a.name]=MockjaxUtils.MockjaxData.create(a)},MockjaxUtils.MockjaxDataMap={},urlPartsExtractRegex=new RegExp("^/(.*)/(.*?)$"),MockjaxUtils.getDataForModelType=function(a,b,c){var d={result:{status:MockjaxUtils.MockjaxSettingsInstance.get("throwProcessError"),message:MockjaxUtils.MockjaxSettingsInstance.get("throwProcessError")?"Failed":"Success"}},e=a.url.match(urlPartsExtractRegex),f="string"===Ember.typeOf(a.data)?JSON.parse(a.data.replace(/^data=/,"")):a.data;if(b=b||e&&e[1],c=c||e&&e[2],MockjaxUtils.MockjaxSettingsInstance.get("modelChangeMap")[b]&&(b=MockjaxUtils.MockjaxSettingsInstance.get("modelChangeMap")[b]),MockjaxUtils.MockjaxSettingsInstance.lastPassedData={model:b,type:c,params:f},b&&c){var g=mockjaxData[b];"getAll"===c?(d.result.data=g.get("data"),Utils.merge(d.result,g.get("getAllAdditionalData"))):"get"===c?(d.result.data=g.get("data").findBy("id",CrudAdapter.getId(f,g.get("modelClass"))),Utils.merge(d.result,g.get("getAdditionalData"))):"delete"===c&&(d.result.data={id:CrudAdapter.getId(f,g.get("modelClass"))})}return d},MockjaxUtils.createUpdateDataForModelType=function(a,b,c,d){if(MockjaxUtils.MockjaxSettingsInstance.get("throwServerError"))a.status=MockjaxUtils.MockjaxSettingsInstance.get("serverErrorCode"),a.statusText="Server Error";else{var e={result:{status:MockjaxUtils.MockjaxSettingsInstance.get("throwProcessError"),message:MockjaxUtils.MockjaxSettingsInstance.get("throwProcessError")?"Failed":"Success"}},f=b.url.match(urlPartsExtractRegex),g="string"===Ember.typeOf(b.data)?JSON.parse(b.data):b.data;if(c=c||f&&f[1],d=d||f&&f[2],MockjaxUtils.MockjaxSettingsInstance.get("modelChangeMap")[c]&&(c=MockjaxUtils.MockjaxSettingsInstance.get("modelChangeMap")[c]),MockjaxUtils.MockjaxSettingsInstance.lastPassedData={model:c,type:d,params:g},c&&d){var h=mockjaxData[c];e.result.data={id:"update"===d?CrudAdapter.getId(g,h.get("modelClass")):null},Utils.merge(e.result.data,h.get("createUpdateAdditionalData"))}a.responseText=e}},$.mockjax({url:/\/.*?\/.*?/,type:"GET",response:function(a){this.responseText=MockjaxUtils.getDataForModelType(a)}}),$.mockjax({url:/\/.*?\/.*?/,type:"POST",response:function(a){MockjaxUtils.createUpdateDataForModelType(this,a)}});